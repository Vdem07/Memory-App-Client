import { $authHost, $host } from "./index";
import { jwtDecode } from "jwt-decode";
import { message } from "antd";

export const googleLogin = async (token) => {
  const { data } = await $host.post("api/User/googleAuth", { token });

  // ‚úÖ –¢–µ–ø–µ—Ä—å data —Å–æ–¥–µ—Ä–∂–∏—Ç { token, user }
  localStorage.setItem("token", data.token);
  localStorage.setItem("user", JSON.stringify(data.user));

  return data;
};

export const yandexLogin = async (token) => {
  const { data } = await $host.post("api/User/yandexAuth", { token });

  localStorage.setItem("token", data.token);
  localStorage.setItem("user", JSON.stringify(data.user));

  return data;
};


// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export const registration = async (name, email, password) => {
  const { data } = await $host.post("api/User/registration", { name, email, password });
  return jwtDecode(data.token);
};

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–Ω–∞
export const login = async (email, password) => {
  const { data } = await $host.post("api/User/login", { email, password });
  return jwtDecode(data.token);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const check = async () => {
  const response = await $host.post("api/User/registration");
  return response;
};

// üîπ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ–ª—É—á–µ–Ω–∏–µ "–õ–∏–Ω–∏–π –∂–∏–∑–Ω–∏"
export const getLifeLines = async (userId) => {
    try {
      const { data } = await $host.get(`api/LifeLine?userId=${userId}`);  // –ü–µ—Ä–µ–¥–∞–µ–º userId
      return data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–Ω–∏–π –∂–∏–∑–Ω–∏:", error);
      return [];
    }
  };
  

// üîπ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –∂–∏–∑–Ω–∏
export const updateLifeLine = async (lifeLine) => {
    try {
      const { data } = await $host.put(`api/LifeLine/${lifeLine.id}`, lifeLine); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      return data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏ –∂–∏–∑–Ω–∏:", error);
      throw error; // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–∏–Ω–∏–∏ –∂–∏–∑–Ω–∏
export const createLifeLine = async (lifeLine) => {
    try {
      const { data } = await $host.post("api/LifeLine", lifeLine); // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      return data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏:", error);
      throw error;
    }
};

export const deleteLifeLine = async (lifeLineId) => {
  try {
    await $authHost.delete(`api/LifeLine/${lifeLineId}`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏:", error);
    throw error;
  }
};


// userAPI.js
export const getLifeLineEvents = async (lifeLineId) => {
    try {
      const { data } = await $host.get(`api/LifeLineEvent?lifelineId=${lifeLineId}`); // –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      return data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:", error);
      return []; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }
  };
  
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  export const createLifeLineEvent = async (lifeLineEvent) => {
    try {
      const { data } = await $host.post("api/LifeLineEvent", lifeLineEvent); // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
      return data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:", error);
      throw error;
    }
  };
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
  export const updateLifeLineEvent = async (lifeLineEvent) => {
    try {
      const { data } = await $host.put(`api/LifeLineEvent/${lifeLineEvent.id}`, lifeLineEvent); // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
      return data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:", error);
      throw error;
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞
export const deleteLifeLineEvent = async (eventId) => {
  try {
    await $authHost.delete(`api/LifeLineEvent/${eventId}`); // Delete the event by ID
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–±—ã—Ç–∏–µ

export const uploadPhotoToEvent = async (formData, eventId) => {
  try {
    const { data } = await $host.post('/api/photo', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
      params: { event_id: eventId },
    });

    return data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:", error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–æ–±—ã—Ç–∏—è
export const getEventPhotos = async (eventId) => {
  try {
    const { data } = await $host.get(`api/Photo?event_id=${eventId}`); // –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ
    return data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:", error);
    return [];
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const deletePhotoFromEvent = async (photoId, eventId) => {
  try {
    await $host.delete(`api/Photo/${photoId}`, { params: { event_id: eventId } });
    message.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
    message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.");
    throw error;
  }
};
